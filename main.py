import random
import json
import os

class MillionaireGame:
    def __init__(self):
        self.questions = [
            {
                "question": "–Ø–∫–∞ —Å—Ç–æ–ª–∏—Ü—è –£–∫—Ä–∞—ó–Ω–∏?",
                "options": ["–ê) –õ—å–≤—ñ–≤", "–ë) –•–∞—Ä–∫—ñ–≤", "–í) –ö–∏—ó–≤", "–ì) –û–¥–µ—Å–∞"],
                "correct": 2,  # –í) –ö–∏—ó–≤ (—ñ–Ω–¥–µ–∫—Å 2)
                "difficulty": "easy"
            },
            {
                "question": "–°–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ —É –≤–∏—Å–æ–∫–æ—Å–Ω–æ–º—É —Ä–æ—Ü—ñ?",
                "options": ["–ê) 365", "–ë) 366", "–í) 367", "–ì) 364"],
                "correct": 1,  # –ë) 366
                "difficulty": "easy"
            },
            {
                "question": "–•—Ç–æ –Ω–∞–ø–∏—Å–∞–≤ —Ä–æ–º–∞–Ω '–¢—ñ–Ω—ñ –∑–∞–±—É—Ç–∏—Ö –ø—Ä–µ–¥–∫—ñ–≤'?",
                "options": ["–ê) –¢–∞—Ä–∞—Å –®–µ–≤—á–µ–Ω–∫–æ", "–ë) –Ü–≤–∞–Ω –§—Ä–∞–Ω–∫–æ", "–í) –ú–∏—Ö–∞–π–ª–æ –ö–æ—Ü—é–±–∏–Ω—Å—å–∫–∏–π", "–ì) –õ–µ—Å—è –£–∫—Ä–∞—ó–Ω–∫–∞"],
                "correct": 2,  # –í) –ú–∏—Ö–∞–π–ª–æ –ö–æ—Ü—é–±–∏–Ω—Å—å–∫–∏–π
                "difficulty": "medium"
            },
            {
                "question": "–Ø–∫–∞ –Ω–∞–π–≤–∏—â–∞ –≥–æ—Ä–∞ –≤ –£–∫—Ä–∞—ó–Ω—ñ?",
                "options": ["–ê) –ì–æ–≤–µ—Ä–ª–∞", "–ë) –ü–µ—Ç—Ä–æ—Å", "–í) –ü—ñ–ø –Ü–≤–∞–Ω", "–ì) –ë—Ä–µ–±–µ–Ω–µ—Å–∫—É–ª"],
                "correct": 0,  # –ê) –ì–æ–≤–µ—Ä–ª–∞
                "difficulty": "medium"
            },
            {
                "question": "–£ —è–∫–æ–º—É —Ä–æ—Ü—ñ –£–∫—Ä–∞—ó–Ω–∞ –ø—Ä–æ–≥–æ–ª–æ—Å–∏–ª–∞ –Ω–µ–∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å?",
                "options": ["–ê) 1990", "–ë) 1991", "–í) 1992", "–ì) 1989"],
                "correct": 1,  # –ë) 1991
                "difficulty": "medium"
            },
            {
                "question": "–Ø–∫–∞ –Ω–∞–π–¥–æ–≤—à–∞ —Ä—ñ—á–∫–∞ –≤ –£–∫—Ä–∞—ó–Ω—ñ?",
                "options": ["–ê) –î–Ω—ñ—Å—Ç–µ—Ä", "–ë) –î–Ω—ñ–ø—Ä–æ", "–í) –ü—ñ–≤–¥–µ–Ω–Ω–∏–π –ë—É–≥", "–ì) –°—ñ–≤–µ—Ä—Å—å–∫–∏–π –î–æ–Ω–µ—Ü—å"],
                "correct": 1,  # –ë) –î–Ω—ñ–ø—Ä–æ
                "difficulty": "hard"
            },
            {
                "question": "–°–∫—ñ–ª—å–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π –≤ –£–∫—Ä–∞—ó–Ω—ñ?",
                "options": ["–ê) 24", "–ë) 25", "–í) 26", "–ì) 27"],
                "correct": 0,  # –ê) 24
                "difficulty": "hard"
            },
            {
                "question": "–Ø–∫–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—î —Å–∏–º–≤–æ–ª 'Au' –≤ —Ç–∞–±–ª–∏—Ü—ñ –ú–µ–Ω–¥–µ–ª—î—î–≤–∞?",
                "options": ["–ê) –°—Ä—ñ–±–ª–æ", "–ë) –ó–æ–ª–æ—Ç–æ", "–í) –ê–ª—é–º—ñ–Ω—ñ–π", "–ì) –ê—Ä–≥–µ–Ω—Ç—É–º"],
                "correct": 1,  # –ë) –ó–æ–ª–æ—Ç–æ
                "difficulty": "hard"
            },
            {
                "question": "–•—Ç–æ –∑ —Ü–∏—Ö –ø–∏—Å—å–º–µ–Ω–Ω–∏–∫—ñ–≤ –æ—Ç—Ä–∏–º–∞–≤ –ù–æ–±–µ–ª—ñ–≤—Å—å–∫—É –ø—Ä–µ–º—ñ—é –∑ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∏?",
                "options": ["–ê) –Ü–≤–∞–Ω –§—Ä–∞–Ω–∫–æ", "–ë) –¢–∞—Ä–∞—Å –®–µ–≤—á–µ–Ω–∫–æ", "–í) –°–≤—ñ—Ç–ª–∞–Ω–∞ –ê–ª–µ–∫—Å—ñ—î–≤–∏—á", "–ì) –õ—ñ–Ω–∞ –ö–æ—Å—Ç–µ–Ω–∫–æ"],
                "correct": 2,  # –í) –°–≤—ñ—Ç–ª–∞–Ω–∞ –ê–ª–µ–∫—Å—ñ—î–≤–∏—á
                "difficulty": "hard"
            },
            {
                "question": "–Ø–∫–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å —Å–≤—ñ—Ç–ª–∞ —É –≤–∞–∫—É—É–º—ñ?",
                "options": ["–ê) 299,792,458 –º/—Å", "–ë) 300,000,000 –º/—Å", "–í) 299,792,458 –∫–º/—Å", "–ì) 300,000 –∫–º/—Å"],
                "correct": 0,  # –ê) 299,792,458 –º/—Å
                "difficulty": "expert"
            }
        ]
        
        self.prize_levels = [
            100, 200, 300, 500, 1000, 2000, 4000, 8000, 16000, 32000,
            64000, 125000, 250000, 500000, 1000000
        ]
        
        self.current_question = 0
        self.current_prize = 0
        self.lifelines = {
            "50/50": True,
            "call_friend": True,
            "audience": True
        }
        
        self.statistics = {
            "games_played": 0,
            "questions_answered": 0,
            "correct_answers": 0,
            "total_winnings": 0
        }
        
        self.load_statistics()
    
    def display_welcome(self):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –µ–∫—Ä–∞–Ω—É"""
        print("=" * 60)
        print("üèÜ –í–Ü–¢–ê–Ñ–ú–û –£ –ì–†–Ü '–•–¢–û –•–û–ß–ï –°–¢–ê–¢–ò –ú–Ü–õ–¨–ô–û–ù–ï–†–û–ú?' üèÜ")
        print("=" * 60)
        print("–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏:")
        print("‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è, –≤–∏–±–∏—Ä–∞—é—á–∏ –ê, –ë, –í –∞–±–æ –ì")
        print("‚Ä¢ –£ –≤–∞—Å —î 3 –ø—ñ–¥–∫–∞–∑–∫–∏: 50/50, –î–∑–≤—ñ–Ω–æ–∫ –¥—Ä—É–≥—É, –î–æ–ø–æ–º–æ–≥–∞ –∑–∞–ª—É")
        print("‚Ä¢ –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç–∏ –≥—Ä–æ—à—ñ –Ω–∞ –±—É–¥—å-—è–∫–æ–º—É –µ—Ç–∞–ø—ñ")
        print("‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - –ø—Ä–æ–≥—Ä–∞—à!")
        print("=" * 60)
    
    def display_question(self, question_data):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π"""
        print(f"\n–ü–∏—Ç–∞–Ω–Ω—è {self.current_question + 1} –∑–∞ {self.prize_levels[self.current_question]} –≥—Ä–Ω:")
        print("-" * 50)
        print(f"‚ùì {question_data['question']}")
        print()
        for i, option in enumerate(question_data['options']):
            print(f"   {option}")
        print("-" * 50)
    
    def display_lifelines(self):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—ñ–¥–∫–∞–∑–æ–∫"""
        print("\nüÜò –î–æ—Å—Ç—É–ø–Ω—ñ –ø—ñ–¥–∫–∞–∑–∫–∏:")
        lifeline_symbols = {
            "50/50": "‚úÇÔ∏è" if self.lifelines["50/50"] else "‚ùå",
            "call_friend": "üìû" if self.lifelines["call_friend"] else "‚ùå",
            "audience": "üë•" if self.lifelines["audience"] else "‚ùå"
        }
        
        print(f"   1) {lifeline_symbols['50/50']} 50/50")
        print(f"   2) {lifeline_symbols['call_friend']} –î–∑–≤—ñ–Ω–æ–∫ –¥—Ä—É–≥—É")
        print(f"   3) {lifeline_symbols['audience']} –î–æ–ø–æ–º–æ–≥–∞ –∑–∞–ª—É")
    
    def use_fifty_fifty(self, question_data):
        """–ü—ñ–¥–∫–∞–∑–∫–∞ 50/50 - –∑–∞–ª–∏—à–∞—î —Ç—ñ–ª—å–∫–∏ 2 –≤–∞—Ä—ñ–∞–Ω—Ç–∏"""
        if not self.lifelines["50/50"]:
            print("‚ùå –¶—è –ø—ñ–¥–∫–∞–∑–∫–∞ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞!")
            return question_data
        
        self.lifelines["50/50"] = False
        correct_answer = question_data['correct']
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ —ñ–Ω–¥–µ–∫—Å—ñ–≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
        wrong_indices = [i for i in range(4) if i != correct_answer]
        
        # –í–∏–ø–∞–¥–∫–æ–≤–æ –≤–∏–±–∏—Ä–∞—î–º–æ 2 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        to_remove = random.sample(wrong_indices, 2)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –≤–µ—Ä—Å—ñ—é –ø–∏—Ç–∞–Ω–Ω—è –∑ –≤–∏–¥–∞–ª–µ–Ω–∏–º–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏
        new_options = []
        for i, option in enumerate(question_data['options']):
            if i in to_remove:
                new_options.append("‚ùå –í–ò–î–ê–õ–ï–ù–û")
            else:
                new_options.append(option)
        
        modified_question = question_data.copy()
        modified_question['options'] = new_options
        
        print("‚úÇÔ∏è –ü—ñ–¥–∫–∞–∑–∫–∞ 50/50 –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞! –î–≤–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        return modified_question
    
    def use_call_friend(self, question_data):
        """–ü—ñ–¥–∫–∞–∑–∫–∞ - –¥–∑–≤—ñ–Ω–æ–∫ –¥—Ä—É–≥—É"""
        if not self.lifelines["call_friend"]:
            print("‚ùå –¶—è –ø—ñ–¥–∫–∞–∑–∫–∞ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞!")
            return
        
        self.lifelines["call_friend"] = False
        
        # –î—Ä—É–≥ –º–∞—î 70% —à–∞–Ω—Å—ñ–≤ –¥–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        if random.random() < 0.7:
            correct_letter = ['–ê', '–ë', '–í', '–ì'][question_data['correct']]
            print(f"üìû –í–∞—à –¥—Ä—É–≥ –∫–∞–∂–µ: '–Ø –¥—É–º–∞—é, —â–æ —Ü–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å {correct_letter}. –î–æ—Å–∏—Ç—å –≤–ø–µ–≤–Ω–µ–Ω–∏–π!'")
        else:
            wrong_answers = [i for i in range(4) if i != question_data['correct']]
            wrong_answer = random.choice(wrong_answers)
            wrong_letter = ['–ê', '–ë', '–í', '–ì'][wrong_answer]
            print(f"üìû –í–∞—à –¥—Ä—É–≥ –∫–∞–∂–µ: '–°–∫–ª–∞–¥–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è... –ú–æ–∂–ª–∏–≤–æ {wrong_letter}? –ù–µ –¥—É–∂–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π.'")
    
    def use_audience_help(self, question_data):
        """–ü—ñ–¥–∫–∞–∑–∫–∞ - –¥–æ–ø–æ–º–æ–≥–∞ –∑–∞–ª—É"""
        if not self.lifelines["audience"]:
            print("‚ùå –¶—è –ø—ñ–¥–∫–∞–∑–∫–∞ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞!")
            return
        
        self.lifelines["audience"] = False
        
        # –ó–∞–ª –∑–∞–∑–≤–∏—á–∞–π –∑–Ω–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (60-80% –≥–æ–ª–æ—Å—ñ–≤)
        percentages = [5, 5, 5, 5]  # –ë–∞–∑–æ–≤—ñ –≤—ñ–¥—Å–æ—Ç–∫–∏ –¥–ª—è –≤—Å—ñ—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
        
        correct_index = question_data['correct']
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º—É—î 60-80% –≥–æ–ª–æ—Å—ñ–≤
        correct_percentage = random.randint(60, 80)
        percentages[correct_index] = correct_percentage
        
        # –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ —Ä–µ—à—Ç—É –≥–æ–ª–æ—Å—ñ–≤ –º—ñ–∂ —ñ–Ω—à–∏–º–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏
        remaining = 100 - correct_percentage
        for i in range(4):
            if i != correct_index:
                percentages[i] = random.randint(1, remaining // 3)
        
        # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–æ 100%
        total = sum(percentages)
        percentages = [int(p * 100 / total) for p in percentages]
        
        print("üë• –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ª—É:")
        letters = ['–ê', '–ë', '–í', '–ì']
        for i, percentage in enumerate(percentages):
            bar = "‚ñà" * (percentage // 5)  # –ì—Ä–∞—Ñ—ñ—á–Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è
            print(f"   {letters[i]}: {percentage:2d}% {bar}")
    
    def get_user_choice(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        while True:
            print("\nüí° –í–∞—à—ñ –¥—ñ—ó:")
            print("   –ê, –ë, –í, –ì - –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è")
            print("   –ü - –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ø—ñ–¥–∫–∞–∑–∫—É")
            print("   –ó - –∑–∞–±—Ä–∞—Ç–∏ –≥—Ä–æ—à—ñ")
            
            choice = input("\n–í–∞—à –≤–∏–±—ñ—Ä: ").upper().strip()
            
            if choice in ['–ê', '–ë', '–í', '–ì', '–ü', '–ó']:
                return choice
            else:
                print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä! –í–∏–±–µ—Ä—ñ—Ç—å –ê, –ë, –í, –ì, –ü –∞–±–æ –ó")
    
    def handle_lifeline_choice(self, question_data):
        """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø—ñ–¥–∫–∞–∑–∫–∏"""
        self.display_lifelines()
        
        while True:
            choice = input("\n–í–∏–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞–∑–∫—É (1-3) –∞–±–æ 0 –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è: ").strip()
            
            if choice == '0':
                return question_data
            elif choice == '1':
                return self.use_fifty_fifty(question_data)
            elif choice == '2':
                self.use_call_friend(question_data)
                return question_data
            elif choice == '3':
                self.use_audience_help(question_data)
                return question_data
            else:
                print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä! –í–∏–±–µ—Ä—ñ—Ç—å 1, 2, 3 –∞–±–æ 0")
    
    def check_answer(self, user_answer, correct_answer):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"""
        answer_map = {'–ê': 0, '–ë': 1, '–í': 2, '–ì': 3}
        user_index = answer_map.get(user_answer, -1)
        
        if user_index == correct_answer:
            return True
        return False
    
    def display_current_winnings(self):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –≤–∏–≥—Ä–∞–Ω–∏—Ö –≥—Ä–æ—à–µ–π"""
        if self.current_question > 0:
            print(f"üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –≤–∏–≥—Ä–∞—à: {self.prize_levels[self.current_question - 1]} –≥—Ä–Ω")
        else:
            print("üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –≤–∏–≥—Ä–∞—à: 0 –≥—Ä–Ω")
    
    def take_money(self):
        """–ì—Ä–∞–≤–µ—Ü—å –∑–∞–±–∏—Ä–∞—î –≥—Ä–æ—à—ñ"""
        if self.current_question == 0:
            print("üí∏ –í–∏ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ –∂–æ–¥–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è! –ó–∞–±–∏—Ä–∞—Ç–∏ –Ω—ñ—á–æ–≥–æ.")
            return 0
        
        winnings = self.prize_levels[self.current_question - 1]
        print(f"üí∞ –í–∏ –∑–∞–±–∏—Ä–∞—î—Ç–µ {winnings} –≥—Ä–Ω! –î—è–∫—É—î–º–æ –∑–∞ –≥—Ä—É!")
        return winnings
    
    def game_over(self, won=False):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏"""
        if won:
            print("üéâüéâüéâ –í–Ü–¢–ê–Ñ–ú–û! –í–ò –°–¢–ê–õ–ò –ú–Ü–õ–¨–ô–û–ù–ï–†–û–ú! üéâüéâüéâ")
            winnings = 1000000
        elif self.current_question == 0:
            print("üò¢ –ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞! –í–∏ –Ω–µ –≤–∏–≥—Ä–∞–ª–∏ –Ω—ñ—á–æ–≥–æ.")
            winnings = 0
        else:
            print(f"üò¢ –ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞! –í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏, –∞–ª–µ –≤–∞—à –≤–∏–≥—Ä–∞—à: {self.current_prize} –≥—Ä–Ω")
            winnings = self.current_prize
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.statistics["games_played"] += 1
        self.statistics["total_winnings"] += winnings
        self.save_statistics()
        
        return winnings
    
    def play_game(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π —ñ–≥—Ä–æ–≤–∏–π —Ü–∏–∫–ª"""
        self.display_welcome()
        
        # –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ
        random.shuffle(self.questions)
        
        while self.current_question < len(self.questions):
            question_data = self.questions[self.current_question]
            
            print(f"\n{'=' * 60}")
            self.display_current_winnings()           
            
            while True:
                user_choice = self.get_user_choice()
                
                if user_choice == '–ü':
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—ñ–¥–∫–∞–∑–∫–∏
                    question_data = self.handle_lifeline_choice(question_data)
                    self.display_question(question_data)
                    continue
                elif user_choice == '–ó':
                    # –ó–∞–±—Ä–∞—Ç–∏ –≥—Ä–æ—à—ñ
                    winnings = self.take_money()
                    self.statistics["total_winnings"] += winnings
                    self.statistics["games_played"] += 1
                    self.save_statistics()
                    return
                else:
                    # –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è
                    break
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            self.statistics["questions_answered"] += 1
            
            if self.check_answer(user_choice, question_data['correct']):
                # –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                self.statistics["correct_answers"] += 1
                self.current_prize = self.prize_levels[self.current_question]
                
                correct_letter = ['–ê', '–ë', '–í', '–ì'][question_data['correct']]
                print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_letter}")
                print(f"üí∞ –í–∏ –≤–∏–≥—Ä–∞–ª–∏ {self.current_prize} –≥—Ä–Ω!")
                
                self.current_question += 1
                
                if self.current_question == len(self.questions):
                    # –ì—Ä–∞–≤–µ—Ü—å –≤—ñ–¥–ø–æ–≤—ñ–≤ –Ω–∞ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è
                    self.game_over(won=True)
                    return
                    
                input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è...")
                
            else:
                # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                correct_letter = ['–ê', '–ë', '–í', '–ì'][question_data['correct']]
                print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_letter}")
                self.game_over(won=False)
                return
    
    def display_statistics(self):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∏"""
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ì–†–ò:")
        print("=" * 40)
        print(f"–ó—ñ–≥—Ä–∞–Ω–æ —ñ–≥–æ—Ä: {self.statistics['games_played']}")
        print(f"–ü–∏—Ç–∞–Ω—å –≤—ñ–¥–ø–æ–≤—ñ–ª–∏: {self.statistics['questions_answered']}")
        print(f"–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {self.statistics['correct_answers']}")
        
        if self.statistics['questions_answered'] > 0:
            accuracy = (self.statistics['correct_answers'] / self.statistics['questions_answered']) * 100
            print(f"–¢–æ—á–Ω—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {accuracy:.1f}%")
        
        print(f"–ó–∞–≥–∞–ª—å–Ω–∏–π –≤–∏–≥—Ä–∞—à: {self.statistics['total_winnings']} –≥—Ä–Ω")
        print("=" * 40)
    
    def save_statistics(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            with open("game_stats.json", "w", encoding="utf-8") as f:
                json.dump(self.statistics, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def load_statistics(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ —Ñ–∞–π–ª—É"""
        try:
            if os.path.exists("game_stats.json"):
                with open("game_stats.json", "r", encoding="utf-8") as f:
                    self.statistics = json.load(f)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
    while True:
        print("\n" + "=" * 60)
        print("üèÜ –•–¢–û –•–û–ß–ï –°–¢–ê–¢–ò –ú–Ü–õ–¨–ô–û–ù–ï–†–û–ú? üèÜ")
        print("=" * 60)
        print("1. üéÆ –ü–æ—á–∞—Ç–∏ –Ω–æ–≤—É –≥—Ä—É")
        print("2. üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("3. ‚ùå –í–∏–π—Ç–∏")
        
        choice = input("\n–í–∞—à –≤–∏–±—ñ—Ä (1-3): ").strip()
        
        if choice == '1':
            game = MillionaireGame()
            game.play_game()
        elif choice == '2':
            game = MillionaireGame()
            game.display_statistics()
            input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
        elif choice == '3':
            print("\nüëã –î—è–∫—É—î–º–æ –∑–∞ –≥—Ä—É! –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!")
            break
        else:
            print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


if __name__ == "__main__":
    main()
    